#!ruby

require 'bibtex'
require 'optparse'
require 'mustache'
require 'csl/styles'
require 'citeproc'
require 'json'

@format = 'publications'
@locale = 'en-GB'
@style = 'apa'
@verbose = true
@rcfile = 'bibtex/bib2aprc'

begin
binding.eval(File.read(@rcfile), @rcfile)
rescue Errno::ENOENT => e
end

OptParse.new do |opts|
  opts.banner = <<EOF
Usage: bib2ap [options] [<bibfile>]

<bibfile> is the bibtex file, defaults to <format>.bib

EOF
  
  opts.on('-h', '--help [styles|locales]', 'Prints this help') do |h|
    if (h == 'styles')
      puts CSL::Style.ls
    elsif ( h == 'locales')
      puts CSL::Locale.ls
    else
      puts opts
    end
    exit
  end

  opts.on('-f', '--format STRING', 
          "Output format and directory (default: '#{@format}')") do |f|
    @format = f
  end
  opts.on('-t', '--template STRING',
          "Template for output (default: <format>.mustache)") do |t|
    @template = t
  end

  opts.on('-e', '--eval STRING',
          "Eval given ruby code on each item (`item` refers to the current item)") do |c|
    @code = c
  end

  opts.on('-l', '--locale STRING', "Locale for citeproc (default: #{@locale}). Run with '--help locales' for available locales") do |l|
    @locale = l
  end

  opts.on('-s', '--style STRING', "Citation style for citeproc (default: #{@style}). Run with '--help styles' for available styles") do |s|
    @style = s
  end
  opts.on('-v', '--[no-]verbose', "Print progress info (default: #{@verbose})") do |v|
    @verbose = v
  end
end.parse!

@template ||= "bibtex/#{@format}.mustache"

@bibfile = ARGV.shift || "bibtex/#{@format}.bib"

def to_fname(item)
  item.title.tr(' ', '-').tr_s('^A-Za-z0-9\-_', '')
end

def month_canon(month)
  return '01' unless month
  month = month.to_s
  return (month.to_i > 0 ? month : (
    Date::ABBR_MONTHNAMES.index(month[0..2].capitalize) || 1
  )).to_s.rjust(2, '0')
end

def verbose(what)
  STDERR.puts what if @verbose
end

def to_escaped(a)
  a.to_s.to_json.sub(/^"/,'').sub(/"$/, '')
end

bib = BibTeX.open @bibfile, include: [:meta_content], filter: :latex
verbose "Read bibtex file #{@bibfile}"
bib.replace.join.extend_initials!

cp = CiteProc::Processor.new style: @style, format: :html, locale: @locale


bib['@entry'].each do |item|
  @must = Mustache.new
  @must.template_file = @template
  verbose "Processing #{item[:key]}"
  if item[:doi]
    item[:doi_url] = "https://doi.org/#{item.doi}"
    item[:url] ||= item[:doi_url]
  end
  if item[:eprinttype]&.downcase == "arxiv"
    item[:arxiv_url] = "https://arxiv.org/abs/#{item.eprint}" 
    item[:url] ||= item[:arxiv_url]
  end
  eval @code if @code
  item.each {|k,v|
    @must["bib_#{k}"] = to_escaped(v)
    @must["bare_bib_#{k}"] = v.to_s
  }
  if item[:year]
    month = month_canon(item[:month])
    @must['date'] = "#{item[:year]}-#{month}-01"
  end
  cit = item.to_citeproc
  cit.each {|k,v| 
    @must["cit_#{k}"] = to_escaped(v)
    @must["bare_cit_#{k}"] = v.to_s
  }
  cp.import [cit]
  citation = cp.render :bibliography, id: item.key
  @must["citation"] = to_escaped(citation[0])
  @must["bare_citation"] = citation[0]
  @must['fname'] = to_fname(item)
  next unless @must[:bare_cit_author]
  authors = eval(@must[:bare_cit_author])
  @must['authors'] = authors
  fname = "_#{@format}/#{@must['fname']}.md"
  verbose "  Writing to #{fname}"
  File.open(fname, 'w') do |ff|
    ff.write(@must.render)
  end
end

